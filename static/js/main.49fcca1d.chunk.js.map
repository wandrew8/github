{"version":3,"sources":["components/RepoCards.js","components/UserCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","likes","fontSize","header","textAlign","icon","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","RepoCard","props","classes","data","Grid","item","lg","md","sm","xs","Card","className","CardHeader","Avatar","aria-label","src","owner","avatar_url","title","login","subheader","moment","updated_at","format","Typography","component","name","CardContent","variant","color","description","IconButton","href","html_url","display","details","flexDirection","content","flex","cover","width","controls","alignItems","paddingLeft","spacing","paddingBottom","playIcon","UserCard","created_at","bio","CardMedia","image","App","useState","isLoading","setIsLoading","userInfo","setUserInfo","repoInfo","setRepoInfo","searchType","setSearchType","userQuery","setUserQuery","topicQuery","setTopicQuery","Fragment","CssBaseline","Container","style","margin","fontWeight","ButtonGroup","Button","onClick","onSubmit","e","preventDefault","fetch","then","res","json","console","log","items","catch","err","validate","autoComplete","TextField","value","onChange","target","id","label","length","type","CircularProgress","container","justifyContent","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.49fcca1d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport { red } from '@material-ui/core/colors';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport moment from 'moment';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%', // 16:9\r\n    },\r\n    likes: {\r\n        fontSize: \"0.8rem\",\r\n    },\r\n    header: {\r\n        textAlign: \"left\",\r\n    },\r\n    icon: {\r\n        textAlign: \"left\",\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: red[500],\r\n      textAlign: \"left\"\r\n    },\r\n  }));\r\n\r\nexport default function RepoCard(props) {\r\n    const classes = useStyles();    \r\n    const { data } = props;\r\n    return (\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    className={classes.header}\r\n                avatar={\r\n                    <Avatar \r\n                        aria-label=\"github user\" \r\n                        src={data.owner.avatar_url}\r\n                        className={classes.avatar}/>                    \r\n                }\r\n                title={`Github User: ${data.owner.login}`}\r\n                subheader={moment(data.updated_at).format('MMMM Do YYYY')}\r\n                />\r\n                <Typography component=\"h2\">{data.name}</Typography>\r\n                <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    {data.description}\r\n                </Typography>\r\n                <Typography component=\"p\"></Typography>\r\n\r\n                </CardContent>\r\n                <IconButton \r\n                    className={classes.icon}\r\n                    aria-label=\"share\">\r\n                    <a href={data.html_url}>\r\n                        <GitHubIcon />\r\n                    </a>\r\n                </IconButton>\r\n        </Card>\r\n      </Grid>\r\n\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  content: {\r\n    flex: '1 0 auto',\r\n  },\r\n  cover: {\r\n    width: 151,\r\n  },\r\n  controls: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  playIcon: {\r\n    height: 38,\r\n    width: 38,\r\n  },\r\n}));\r\n\r\nexport default function UserCard(props) {\r\n  const classes = useStyles();\r\n  const {data} = props;\r\n  return (\r\n    <Grid item lg={4} md={6} sm={6} xs={12}>\r\n    <Card className={classes.root}>\r\n      <div className={classes.details}>\r\n        <CardContent className={classes.content}>\r\n          <Typography component=\"h5\" variant=\"h5\">\r\n            {data.name}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            {data.login}\r\n          </Typography>\r\n          <hr/>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            User Since {moment(data.created_at).format('MMMM Do YYYY')}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            {data.bio}\r\n          </Typography>\r\n        </CardContent>\r\n      </div>\r\n      <CardMedia\r\n        className={classes.cover}\r\n        image={data.avatar_url}\r\n        title={data.name}\r\n      />\r\n    </Card>\r\n    </Grid>\r\n  );\r\n}","import React, {useState} from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport RepoCards from './components/RepoCards'\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport UserCard from './components/UserCard';\nimport './App.scss';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [userInfo, setUserInfo] = useState([]);\n  const [repoInfo, setRepoInfo] = useState([]);\n  const [searchType, setSearchType] = useState(\"topic\");\n  const [userQuery, setUserQuery] = useState('');\n  const [topicQuery, setTopicQuery] = useState('');\n\n  const getUserInfo = (e) => {\n    setIsLoading(true);\n    e.preventDefault();\n    fetch(`https://api.github.com/users/${userQuery}`)\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      console.log(data.login)\n      setUserInfo(data);\n      setUserQuery('');\n      setIsLoading(false);\n    })\n    .catch(err => console.log(err))\n  };\n\n  const getSearchRepo = (e) => {\n    setIsLoading(true);\n    e.preventDefault();\n    fetch(`https://api.github.com/search/repositories?q=${topicQuery}&sort=stars&order=desc`)\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      setIsLoading(false);\n      setRepoInfo(data.items);\n      setTopicQuery('');\n    })\n    .catch(err => console.log(err))\n  };\n  \n  const handleUserChange = (e) => {\n    setUserQuery(e.target.value);\n  }\n\n  const handleTopicChange = (e) => {\n    setTopicQuery(e.target.value);\n  }\n  \n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"lg\" style={{ margin: \"0 auto\", textAlign: \"center\"}}>\n        <Typography component=\"div\" style={{margin: \"2rem\", fontSize: \"3rem\", fontWeight: \"200\"}}>GitHub Search</Typography>\n        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n          <Button onClick={() => setSearchType(\"topic\")}>Search By Topic</Button>\n          <Button onClick={() => setSearchType(\"user\")}>Search By User</Button>\n        </ButtonGroup>\n        <div className=\"formContainer\">\n          {searchType === 'topic' ? \n          <form \n            onSubmit={getSearchRepo}\n            className=\"form\" \n            validate=\"true\"\n            autoComplete=\"off\">\n            <TextField \n              value={topicQuery}\n              onChange={handleTopicChange}\n              id=\"outlined-basic\" \n              label=\"Topic Search\" \n              variant=\"outlined\" />\n            <Typography component=\"p\" style={{color: \"lightgray\", margin: \"0.8rem\"}}>Enter a topic to search such as React, Ruby, or Javascript</Typography>\n            {topicQuery.length > 3 ? <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n              Search Topic\n            </Button> : null}\n          </form> : null }\n          {searchType === 'user' ? \n          <form \n            onSubmit={getUserInfo}\n            className=\"form\" \n            validate=\"true\"\n            autoComplete=\"off\">\n            <TextField \n              value={userQuery}\n              onChange={handleUserChange}\n              id=\"outlined-basic\" \n              label=\"User Search\" \n              variant=\"outlined\" />\n            <Typography component=\"p\" style={{color: \"lightgray\", margin: \"0.8rem\"}}>Enter a github username</Typography>\n            {userQuery.length > 3 ? <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n              Search Users\n            </Button> : null}\n          </form> : null}\n        </div>\n        {isLoading ? <CircularProgress /> : null}\n        <Grid container spacing={3} style={{ justifyContent: \"center\", margin: \"0rem auto\", maxWidth: \"900px\", width: \"90%\"}}>\n          {!isLoading && userInfo.login ? <UserCard data={userInfo} /> : null}\n          {repoInfo.length > 0 ? repoInfo.map(item => {return <RepoCards data={item} />}) : null}\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}